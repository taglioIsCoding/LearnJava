package mastermind.tests.model;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;

import mastermind.model.*;

public class MasterMindTest3 {
	
	@Test
	public void testCheEsaurisceTentativi() {
		MasterMind gioco = new MasterMind(5,4) {
			protected void sorteggiaCombinazione(Combinazione segreta) {
				segreta.setPiolo(0, PioloDiGioco.ROSSO);
				segreta.setPiolo(1, PioloDiGioco.ROSSO);
				segreta.setPiolo(2, PioloDiGioco.VERDE);
				segreta.setPiolo(3, PioloDiGioco.GIALLO);
			}
		};
		assertEquals(5, gioco.maxTentativi());
		assertEquals(5, gioco.tentativiRimasti());
		assertEquals(0, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(Status.IN_CORSO, gioco.stato());
		assertEquals("ROSSO,ROSSO,VERDE,GIALLO",gioco.combinazioneSegreta());
		Combinazione c1 = new Combinazione(4);
		c1.setPiolo(0, PioloDiGioco.ROSSO);
		c1.setPiolo(1, PioloDiGioco.GIALLO);
		c1.setPiolo(2, PioloDiGioco.VERDE);
		c1.setPiolo(3, PioloDiGioco.BLU);
		Status status1 = gioco.tenta(c1);
		assertEquals(Status.IN_CORSO, status1);
		//	System.out.println("testCheEsaurisceTentativi-risposta#1: " + gioco.ultimaRisposta());
		assertEquals(5, gioco.maxTentativi());
		assertEquals(4, gioco.tentativiRimasti());
		assertEquals(1, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());		
		assertTrue(gioco.toString().contains("Situazione:"+ System.lineSeparator()));
		assertTrue(gioco.toString().contains("Gioco: "+ Status.IN_CORSO));
		assertTrue(gioco.toString().contains("ROSSO,GIALLO,VERDE,BLU\t\tNERO,NERO,BIANCO,VUOTO"+ System.lineSeparator()));
		//System.out.println(gioco);
		assertEquals(c1,gioco.ultimoTentativo().get());
		Risposta r1 = new Risposta(4);
		r1.setPiolo(0, PioloRisposta.NERO);
		r1.setPiolo(1, PioloRisposta.NERO);
		r1.setPiolo(2, PioloRisposta.BIANCO);
		r1.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r1,gioco.ultimaRisposta().get());
		//------------
		Combinazione c2 = new Combinazione(4);
		c2.setPiolo(0, PioloDiGioco.ROSSO);
		c2.setPiolo(1, PioloDiGioco.VERDE);
		c2.setPiolo(2, PioloDiGioco.ROSSO);
		c2.setPiolo(3, PioloDiGioco.GIALLO);
		Status status2 = gioco.tenta(c2);
		assertEquals(Status.IN_CORSO, status2);
		//	System.out.println("testCheEsaurisceTentativi-risposta#2: " + gioco.ultimaRisposta());
		assertEquals(5, gioco.maxTentativi());
		assertEquals(3, gioco.tentativiRimasti());
		assertEquals(2, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c2,gioco.ultimoTentativo().get());
		Risposta r2 = new Risposta(4);
		r2.setPiolo(0, PioloRisposta.NERO);
		r2.setPiolo(1, PioloRisposta.NERO);
		r2.setPiolo(2, PioloRisposta.BIANCO);
		r2.setPiolo(3, PioloRisposta.BIANCO);
		assertEquals(r2,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c3 = new Combinazione(4);
		c3.setPiolo(0, PioloDiGioco.ROSSO);
		c3.setPiolo(1, PioloDiGioco.GIALLO);
		c3.setPiolo(2, PioloDiGioco.VERDE);
		c3.setPiolo(3, PioloDiGioco.ROSSO);
		Status status3 = gioco.tenta(c3);
		assertEquals(Status.IN_CORSO, status3);
		//	System.out.println("testCheEsaurisceTentativi-risposta#3: " + gioco.ultimaRisposta());
		assertEquals(5, gioco.maxTentativi());
		assertEquals(2, gioco.tentativiRimasti());
		assertEquals(3, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c3,gioco.ultimoTentativo().get());
		Risposta r3 = new Risposta(4);
		r3.setPiolo(0, PioloRisposta.NERO);
		r3.setPiolo(1, PioloRisposta.NERO);
		r3.setPiolo(2, PioloRisposta.BIANCO);
		r3.setPiolo(3, PioloRisposta.BIANCO);
		assertEquals(r3,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c4 = new Combinazione(4);
		c4.setPiolo(0, PioloDiGioco.VERDE);
		c4.setPiolo(1, PioloDiGioco.GIALLO);
		c4.setPiolo(2, PioloDiGioco.ROSSO);
		c4.setPiolo(3, PioloDiGioco.ROSSO);
		Status status4 = gioco.tenta(c4);
		assertEquals(Status.IN_CORSO, status4);
		//	System.out.println("testCheEsaurisceTentativi-risposta#4: " + gioco.ultimaRisposta());
		assertEquals(5, gioco.maxTentativi());
		assertEquals(1, gioco.tentativiRimasti());
		assertEquals(4, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c4,gioco.ultimoTentativo().get());
		Risposta r4 = new Risposta(4);
		r4.setPiolo(0, PioloRisposta.BIANCO);
		r4.setPiolo(1, PioloRisposta.BIANCO);
		r4.setPiolo(2, PioloRisposta.BIANCO);
		r4.setPiolo(3, PioloRisposta.BIANCO);
		assertEquals(r4,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c5 = new Combinazione(4);
		c5.setPiolo(0, PioloDiGioco.VERDE);
		c5.setPiolo(1, PioloDiGioco.ROSSO);
		c5.setPiolo(2, PioloDiGioco.GIALLO);
		c5.setPiolo(3, PioloDiGioco.ROSSO);
		Status status5 = gioco.tenta(c5);
		assertEquals(Status.PERSO, status5);
		//	System.out.println("testCheEsaurisceTentativi-risposta#5: " + gioco.ultimaRisposta());
		assertEquals(5, gioco.maxTentativi());
		assertEquals(0, gioco.tentativiRimasti());
		assertEquals(5, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c5,gioco.ultimoTentativo().get());
		Risposta r5 = new Risposta(4);
		r5.setPiolo(0, PioloRisposta.NERO);
		r5.setPiolo(1, PioloRisposta.BIANCO);
		r5.setPiolo(2, PioloRisposta.BIANCO);
		r5.setPiolo(3, PioloRisposta.BIANCO);
		assertEquals(r5,gioco.ultimaRisposta().get());		
		//------------
		/*
		Combinazione c6 = new Combinazione(4);
		c6.setCell(0, PioloDiGioco.GIALLO);
		c6.setCell(1, PioloDiGioco.ROSSO);
		c6.setCell(2, PioloDiGioco.VERDE);
		c6.setCell(3, PioloDiGioco.GIALLO);
		Status status6 = gioco.tenta(c6);
		assertEquals(Status.LOST, status6);
		//	System.out.println("testCheEsaurisceTentativi-risposta#6: " + gioco.ultimaRisposta());
		assertEquals(5, gioco.maxTentativi());
		assertEquals(-1, gioco.tentativiRimasti());
		assertEquals(6, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c6,gioco.ultimoTentativo().get());
		Risposta r6 = new Risposta(4);
		r6.setCell(0, PioloRisposta.NERO);
		r6.setCell(1, PioloRisposta.NERO);
		r6.setCell(2, PioloRisposta.NERO);
		r6.setCell(3, PioloRisposta.VUOTO);
		assertEquals(r6,gioco.ultimaRisposta().get());	
		*/	
		System.out.println(gioco);
	}
	
	@Test
	public void testConTreGialli() {
		MasterMind gioco = new MasterMind(10,4) {
			protected void sorteggiaCombinazione(Combinazione segreta) {
				segreta.setPiolo(0, PioloDiGioco.ROSSO);
				segreta.setPiolo(1, PioloDiGioco.GIALLO);
				segreta.setPiolo(2, PioloDiGioco.GIALLO);
				segreta.setPiolo(3, PioloDiGioco.GIALLO);
			}
		};
		assertEquals(10, gioco.maxTentativi());
		assertEquals(10, gioco.tentativiRimasti());
		assertEquals(0, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(Status.IN_CORSO, gioco.stato());
		assertEquals("ROSSO,GIALLO,GIALLO,GIALLO",gioco.combinazioneSegreta());
		Combinazione c1 = new Combinazione(4);
		c1.setPiolo(0, PioloDiGioco.ROSSO);
		c1.setPiolo(1, PioloDiGioco.GIALLO);
		c1.setPiolo(2, PioloDiGioco.VERDE);
		c1.setPiolo(3, PioloDiGioco.BLU);
		Status status1 = gioco.tenta(c1);
		assertEquals(Status.IN_CORSO, status1);
		//	System.out.println("testConTreGialli-risposta#1: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(9, gioco.tentativiRimasti());
		assertEquals(1, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());		
		assertTrue(gioco.toString().contains("Situazione:"+ System.lineSeparator()));
		assertTrue(gioco.toString().contains("Gioco: "+ Status.IN_CORSO));
		assertTrue(gioco.toString().contains("ROSSO,GIALLO,VERDE,BLU\t\tNERO,NERO,VUOTO,VUOTO"+ System.lineSeparator()));
		//System.out.println(gioco);
		assertEquals(c1,gioco.ultimoTentativo().get());
		Risposta r1 = new Risposta(4);
		r1.setPiolo(0, PioloRisposta.NERO);
		r1.setPiolo(1, PioloRisposta.NERO);
		r1.setPiolo(2, PioloRisposta.VUOTO);
		r1.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r1,gioco.ultimaRisposta().get());
		//------------
		Combinazione c2 = new Combinazione(4);
		c2.setPiolo(0, PioloDiGioco.ROSSO);
		c2.setPiolo(1, PioloDiGioco.VERDE);
		c2.setPiolo(2, PioloDiGioco.ROSSO);
		c2.setPiolo(3, PioloDiGioco.GIALLO);
		Status status2 = gioco.tenta(c2);
		assertEquals(Status.IN_CORSO, status2);
		//	System.out.println("testConTreGialli-risposta#2: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(8, gioco.tentativiRimasti());
		assertEquals(2, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c2,gioco.ultimoTentativo().get());
		Risposta r2 = new Risposta(4);
		r2.setPiolo(0, PioloRisposta.NERO);
		r2.setPiolo(1, PioloRisposta.NERO);
		r2.setPiolo(2, PioloRisposta.VUOTO);
		r2.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r2,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c3 = new Combinazione(4);
		c3.setPiolo(0, PioloDiGioco.ROSSO);
		c3.setPiolo(1, PioloDiGioco.GIALLO);
		c3.setPiolo(2, PioloDiGioco.VERDE);
		c3.setPiolo(3, PioloDiGioco.ROSSO);
		Status status3 = gioco.tenta(c3);
		assertEquals(Status.IN_CORSO, status3);
		//	System.out.println("testConTreGialli-risposta#3: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(7, gioco.tentativiRimasti());
		assertEquals(3, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c3,gioco.ultimoTentativo().get());
		Risposta r3 = new Risposta(4);
		r3.setPiolo(0, PioloRisposta.NERO);
		r3.setPiolo(1, PioloRisposta.NERO);
		r3.setPiolo(2, PioloRisposta.VUOTO);
		r3.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r3,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c4 = new Combinazione(4);
		c4.setPiolo(0, PioloDiGioco.VERDE);
		c4.setPiolo(1, PioloDiGioco.GIALLO);
		c4.setPiolo(2, PioloDiGioco.ROSSO);
		c4.setPiolo(3, PioloDiGioco.ROSSO);
		Status status4 = gioco.tenta(c4);
		assertEquals(Status.IN_CORSO, status4);
		//	System.out.println("testConTreGialli-risposta#4: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(6, gioco.tentativiRimasti());
		assertEquals(4, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c4,gioco.ultimoTentativo().get());
		Risposta r4 = new Risposta(4);
		r4.setPiolo(0, PioloRisposta.NERO);
		r4.setPiolo(1, PioloRisposta.BIANCO);
		r4.setPiolo(2, PioloRisposta.VUOTO);
		r4.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r4,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c5 = new Combinazione(4);
		c5.setPiolo(0, PioloDiGioco.GIALLO);
		c5.setPiolo(1, PioloDiGioco.ROSSO);
		c5.setPiolo(2, PioloDiGioco.GIALLO);
		c5.setPiolo(3, PioloDiGioco.ROSSO);
		Status status5 = gioco.tenta(c5);
		assertEquals(Status.IN_CORSO, status5);
		//	System.out.println("testConTreGialli-risposta#5: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(5, gioco.tentativiRimasti());
		assertEquals(5, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c5,gioco.ultimoTentativo().get());
		Risposta r5 = new Risposta(4);
		r5.setPiolo(0, PioloRisposta.NERO);
		r5.setPiolo(1, PioloRisposta.BIANCO);
		r5.setPiolo(2, PioloRisposta.BIANCO);
		r5.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r5,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c6 = new Combinazione(4);
		c6.setPiolo(0, PioloDiGioco.ROSSO);
		c6.setPiolo(1, PioloDiGioco.GIALLO);
		c6.setPiolo(2, PioloDiGioco.GIALLO);
		c6.setPiolo(3, PioloDiGioco.GIALLO);
		Status status6 = gioco.tenta(c6);
		assertEquals(Status.VITTORIA, status6);
		//	System.out.println("testConTreGialli-risposta#6: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(4, gioco.tentativiRimasti());
		assertEquals(6, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c6,gioco.ultimoTentativo().get());
		Risposta r6 = new Risposta(4);
		r6.setPiolo(0, PioloRisposta.NERO);
		r6.setPiolo(1, PioloRisposta.NERO);
		r6.setPiolo(2, PioloRisposta.NERO);
		r6.setPiolo(3, PioloRisposta.NERO);
		assertEquals(r6,gioco.ultimaRisposta().get());		
	}
	
	@Test
	public void testConTuttiVerdi() {
		MasterMind gioco = new MasterMind(10,4) {
			protected void sorteggiaCombinazione(Combinazione segreta) {
				segreta.setPiolo(0, PioloDiGioco.VERDE);
				segreta.setPiolo(1, PioloDiGioco.VERDE);
				segreta.setPiolo(2, PioloDiGioco.VERDE);
				segreta.setPiolo(3, PioloDiGioco.VERDE);
			}
		};
		assertEquals(10, gioco.maxTentativi());
		assertEquals(10, gioco.tentativiRimasti());
		assertEquals(0, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(Status.IN_CORSO, gioco.stato());
		assertEquals("VERDE,VERDE,VERDE,VERDE",gioco.combinazioneSegreta());
		Combinazione c1 = new Combinazione(4);
		c1.setPiolo(0, PioloDiGioco.ROSSO);
		c1.setPiolo(1, PioloDiGioco.GIALLO);
		c1.setPiolo(2, PioloDiGioco.VERDE);
		c1.setPiolo(3, PioloDiGioco.BLU);
		Status status1 = gioco.tenta(c1);
		assertEquals(Status.IN_CORSO, status1);
		//	System.out.println("testConTuttiVerdi-risposta#1: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(9, gioco.tentativiRimasti());
		assertEquals(1, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());		
		assertTrue(gioco.toString().contains("Situazione:"+ System.lineSeparator()));
		assertTrue(gioco.toString().contains("Gioco: "+ Status.IN_CORSO));
		assertTrue(gioco.toString().contains("ROSSO,GIALLO,VERDE,BLU\t\tNERO,VUOTO,VUOTO,VUOTO"+ System.lineSeparator()));
		//System.out.println(gioco);
		assertEquals(c1,gioco.ultimoTentativo().get());
		Risposta r1 = new Risposta(4);
		r1.setPiolo(0, PioloRisposta.NERO);
		r1.setPiolo(1, PioloRisposta.VUOTO);
		r1.setPiolo(2, PioloRisposta.VUOTO);
		r1.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r1,gioco.ultimaRisposta().get());
		//------------
		Combinazione c2 = new Combinazione(4);
		c2.setPiolo(0, PioloDiGioco.ROSSO);
		c2.setPiolo(1, PioloDiGioco.VERDE);
		c2.setPiolo(2, PioloDiGioco.ROSSO);
		c2.setPiolo(3, PioloDiGioco.GIALLO);
		Status status2 = gioco.tenta(c2);
		assertEquals(Status.IN_CORSO, status2);
		//	System.out.println("testConTuttiVerdi-risposta#2: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(8, gioco.tentativiRimasti());
		assertEquals(2, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c2,gioco.ultimoTentativo().get());
		Risposta r2 = new Risposta(4);
		r2.setPiolo(0, PioloRisposta.NERO);
		r2.setPiolo(1, PioloRisposta.VUOTO);
		r2.setPiolo(2, PioloRisposta.VUOTO);
		r2.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r2,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c3 = new Combinazione(4);
		c3.setPiolo(0, PioloDiGioco.ROSSO);
		c3.setPiolo(1, PioloDiGioco.GIALLO);
		c3.setPiolo(2, PioloDiGioco.VERDE);
		c3.setPiolo(3, PioloDiGioco.ROSSO);
		Status status3 = gioco.tenta(c3);
		assertEquals(Status.IN_CORSO, status3);
		//	System.out.println("testConTuttiVerdi-risposta#3: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(7, gioco.tentativiRimasti());
		assertEquals(3, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c3,gioco.ultimoTentativo().get());
		Risposta r3 = new Risposta(4);
		r3.setPiolo(0, PioloRisposta.NERO);
		r3.setPiolo(1, PioloRisposta.VUOTO);
		r3.setPiolo(2, PioloRisposta.VUOTO);
		r3.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r3,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c4 = new Combinazione(4);
		c4.setPiolo(0, PioloDiGioco.VERDE);
		c4.setPiolo(1, PioloDiGioco.GIALLO);
		c4.setPiolo(2, PioloDiGioco.ROSSO);
		c4.setPiolo(3, PioloDiGioco.VERDE);
		Status status4 = gioco.tenta(c4);
		assertEquals(Status.IN_CORSO, status4);
		//	System.out.println("testConTuttiVerdi-risposta#4: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(6, gioco.tentativiRimasti());
		assertEquals(4, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c4,gioco.ultimoTentativo().get());
		Risposta r4 = new Risposta(4);
		r4.setPiolo(0, PioloRisposta.NERO);
		r4.setPiolo(1, PioloRisposta.NERO);
		r4.setPiolo(2, PioloRisposta.VUOTO);
		r4.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r4,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c5 = new Combinazione(4);
		c5.setPiolo(0, PioloDiGioco.GIALLO);
		c5.setPiolo(1, PioloDiGioco.VERDE);
		c5.setPiolo(2, PioloDiGioco.VERDE);
		c5.setPiolo(3, PioloDiGioco.ROSSO);
		Status status5 = gioco.tenta(c5);
		assertEquals(Status.IN_CORSO, status5);
		//	System.out.println("testConTuttiVerdi-risposta#5: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(5, gioco.tentativiRimasti());
		assertEquals(5, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c5,gioco.ultimoTentativo().get());
		Risposta r5 = new Risposta(4);
		r5.setPiolo(0, PioloRisposta.NERO);
		r5.setPiolo(1, PioloRisposta.NERO);
		r5.setPiolo(2, PioloRisposta.VUOTO);
		r5.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r5,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c6 = new Combinazione(4);
		c6.setPiolo(0, PioloDiGioco.VERDE);
		c6.setPiolo(1, PioloDiGioco.GIALLO);
		c6.setPiolo(2, PioloDiGioco.VERDE);
		c6.setPiolo(3, PioloDiGioco.VERDE);
		Status status6 = gioco.tenta(c6);
		assertEquals(Status.IN_CORSO, status6);
		//	System.out.println("testConTuttiVerdi-risposta#6: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(4, gioco.tentativiRimasti());
		assertEquals(6, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c6,gioco.ultimoTentativo().get());
		Risposta r6 = new Risposta(4);
		r6.setPiolo(0, PioloRisposta.NERO);
		r6.setPiolo(1, PioloRisposta.NERO);
		r6.setPiolo(2, PioloRisposta.NERO);
		r6.setPiolo(3, PioloRisposta.VUOTO);
		assertEquals(r6,gioco.ultimaRisposta().get());		
		//------------
		Combinazione c7 = new Combinazione(4);
		c7.setPiolo(0, PioloDiGioco.VERDE);
		c7.setPiolo(1, PioloDiGioco.VERDE);
		c7.setPiolo(2, PioloDiGioco.VERDE);
		c7.setPiolo(3, PioloDiGioco.VERDE);
		Status status7 = gioco.tenta(c7);
		assertEquals(Status.VITTORIA, status7);
		//	System.out.println("testConTuttiVerdi-risposta#7: " + gioco.ultimaRisposta());
		assertEquals(10, gioco.maxTentativi());
		assertEquals(3, gioco.tentativiRimasti());
		assertEquals(7, gioco.tentativiEffettuati());
		assertEquals(4, gioco.dimensione());
		assertEquals(c7,gioco.ultimoTentativo().get());
		Risposta r7 = new Risposta(4);
		r7.setPiolo(0, PioloRisposta.NERO);
		r7.setPiolo(1, PioloRisposta.NERO);
		r7.setPiolo(2, PioloRisposta.NERO);
		r7.setPiolo(3, PioloRisposta.NERO);
		assertEquals(r7,gioco.ultimaRisposta().get());		
	}
}
